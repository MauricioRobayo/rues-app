import { Badge } from "@/app/[company]/Badge";
import { getCompanyRecordFromPathSegment } from "@/app/[company]/getCompanyRecordFromPathSegment";
import { getRuesDataByNit } from "@/app/[company]/rues";
import type { companies } from "@/app/db/schema";
import { formatNit } from "@/app/format-nit";
import { dateFormatter } from "@/app/formatters";
import { formatDistanceToNowStrict } from "date-fns";
import { es } from "date-fns/locale/es";
import type { Metadata } from "next";
import { getVerificationDigit } from "nit-verifier";
import { type ReactNode } from "react";

interface PageProps {
  params: Promise<{ company: string }>;
}

export const dynamic = "force-static";

type Company = typeof companies.$inferInsert;
type CompanyProperty = keyof Company;
type CompanyValue = Company[CompanyProperty];

type DetailsMapping = {
  key: CompanyProperty;
  label: string;
  renderValue?: (value: CompanyValue) => ReactNode;
  itemProp?: string;
};

const detailsMapping: DetailsMapping[] = [
  { key: "businessName", label: "Razón Social" },
  { key: "nit", label: "NIT" },
  {
    key: "nit",
    label: "DV",
    renderValue: (value: CompanyValue) =>
      typeof value === "number" ? getVerificationDigit(value) : null,
  },
  { key: "legalEntity", label: "Organización Jurídica" },
  { key: "registrationDate", label: "Fecha de constitución" },
  {
    key: "registrationDate",
    label: "Antigüedad",
    renderValue: (value: CompanyValue) =>
      value instanceof Date
        ? formatDistanceToNowStrict(value, {
            locale: es,
          })
        : null,
  },
  { key: "businessAddress", label: "Dirección", itemProp: "address" },
  { key: "city", label: "Ciudad", itemProp: "city" },
  { key: "state", label: "Departamento", itemProp: "state" },
  {
    key: "companySize",
    label: "Tamaño de la empresa",
    itemProp: "numberOfEmployees",
  },
];

export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const { company } = await params;
  const companyRecord = await getCompanyRecordFromPathSegment(company);
  const formattedNit = formatNit(companyRecord.nit);
  return {
    title: `${companyRecord.businessName} - NIT ${formattedNit}`,
    // description: "Generated by create next app",
  };
}

export default async function page({ params }: PageProps) {
  const { company } = await params;
  const companyRecord = await getCompanyRecordFromPathSegment(company);
  const formattedNit = formatNit(companyRecord.nit);
  const ruesData = await getRuesDataByNit(companyRecord.nit);
  const status = ruesData?.details?.estado;

  return (
    <article itemScope itemType="https://schema.org/Organization">
      <header className="flex flex-col gap-0 py-8 sm:gap-2">
        <h1
          itemProp="name"
          className="text-balance text-xl font-semibold text-brand sm:text-2xl"
        >
          {companyRecord.businessName}
        </h1>
        <div className="flex items-center gap-2">
          <h2 className="text-base text-slate-500 sm:text-lg">
            NIT: {formattedNit}
          </h2>
          {!!status && (
            <Badge variant={status === "ACTIVA" ? "success" : "error"}>
              Matrícula {status}
            </Badge>
          )}
        </div>
      </header>
      <section>
        <dl className="flex flex-col gap-1 text-sm sm:text-base">
          {detailsMapping.map((detail) => {
            const value = companyRecord[detail.key];
            return (
              <CompanyDetail
                key={detail.label}
                value={value}
                label={detail.label}
                itemProp={detail.itemProp}
              />
            );
          })}
        </dl>
      </section>
    </article>
  );
}

function renderValue(value: CompanyValue) {
  if (value instanceof Date) {
    return dateFormatter.format(value);
  }
  return value;
}

function CompanyDetail({
  label,
  itemProp,
  value,
}: {
  label: string;
  itemProp?: string;
  value: CompanyValue;
}) {
  return (
    <div key={label} className="flex flex-col gap-x-1 sm:flex-row">
      <dt className="shrink-0">{label}:</dt>
      <dd itemProp={itemProp} className="text-slate-500">
        {renderValue ? renderValue(value) : renderValue(value)}
      </dd>
    </div>
  );
}
