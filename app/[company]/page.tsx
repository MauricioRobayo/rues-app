import { Badge } from "@/app/[company]/Badge";
import { getCompanyRecordFromPathSegment } from "@/app/[company]/getCompanyRecordFromPathSegment";
import { getRuesDataByNit } from "@/app/[company]/rues";
import type { companies } from "@/app/db/schema";
import { formatNit } from "@/app/format-nit";
import { dateFormatter } from "@/app/formatters";
import { formatDistanceToNowStrict } from "date-fns";
import { es } from "date-fns/locale/es";
import type { Metadata } from "next";
import { getVerificationDigit } from "nit-verifier";
import { Fragment, type JSX } from "react";

interface PageProps {
  params: Promise<{ company: string }>;
}

export const dynamic = "force-static";

type Company = typeof companies.$inferInsert;
type CompanyProperty = keyof Company;
type CompanyValue = Company[CompanyProperty];

type DetailsMapping = {
  key: CompanyProperty;
  label?: string;
  itemProp?: string;
  render?: (value: CompanyValue) => JSX.Element | null;
};

const detailsMapping: DetailsMapping[] = [
  { key: "businessName", label: "Razón Social" },
  {
    key: "nit",
    render: renderNit,
  },
  { key: "legalEntity", label: "Organización Jurídica" },
  {
    key: "registrationDate",
    render: renderRegistrationDate,
  },
  { key: "businessAddress", label: "Dirección", itemProp: "address" },
  { key: "city", label: "Ciudad", itemProp: "city" },
  { key: "state", label: "Departamento", itemProp: "state" },
  {
    key: "companySize",
    label: "Tamaño de la empresa",
    itemProp: "numberOfEmployees",
  },
];

export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const { company } = await params;
  const companyRecord = await getCompanyRecordFromPathSegment(company);
  const formattedNit = formatNit(companyRecord.nit);
  return {
    title: `${companyRecord.businessName} - NIT ${formattedNit}`,
    // description: "Generated by create next app",
  };
}

export default async function page({ params }: PageProps) {
  const { company } = await params;
  const companyRecord = await getCompanyRecordFromPathSegment(company);
  const formattedNit = formatNit(companyRecord.nit);
  const dv = getVerificationDigit(companyRecord.nit);
  const registrationDate = dateFormatter.format(companyRecord.registrationDate);
  const ruesData = await getRuesDataByNit(companyRecord.nit);
  const status = ruesData?.details?.estado;

  return (
    <article itemScope itemType="https://schema.org/Organization">
      <header className="flex flex-col gap-2 py-8">
        <h1
          itemProp="name"
          className="text-balance text-2xl font-semibold text-brand"
        >
          {companyRecord.businessName}
        </h1>
        <div className="flex items-center gap-2">
          <h2 className="text-slate-500">NIT: {formattedNit}</h2>
          {!!status && (
            <Badge variant={status === "ACTIVA" ? "success" : "error"}>
              Matrícula {status}
            </Badge>
          )}
        </div>
      </header>
      <section>
        <dl className="flex flex-col gap-1">
          {detailsMapping.map((detail) => {
            const value = companyRecord[detail.key];
            if ("render" in detail) {
              return (
                <Fragment key={detail.key}>{detail.render(value)}</Fragment>
              );
            }
            return (
              <Fragment key={detail.key}>
                <div className="flex gap-2">
                  <dt className="">{detail.label}:</dt>
                  <dd itemProp={detail.itemProp} className="text-slate-500">
                    {renderValue(value)}
                  </dd>
                </div>
              </Fragment>
            );
          })}
        </dl>
      </section>
    </article>
  );
}

function renderValue(value: CompanyValue) {
  if (value instanceof Date) {
    return dateFormatter.format(value);
  }
  return value;
}

function renderNit(nit: CompanyValue) {
  if (typeof nit !== "number") {
    return null;
  }
  return (
    <>
      <div className="flex gap-2">
        <dt>NIT:</dt>
        <dd className="text-slate-500">{nit}</dd>
      </div>
      <div className="flex gap-2">
        <dt>DV:</dt>
        <dd className="text-slate-500">{getVerificationDigit(nit)}</dd>
      </div>
    </>
  );
}
function renderRegistrationDate(registrationDate: CompanyValue) {
  if (!(registrationDate instanceof Date)) {
    return null;
  }
  return (
    <>
      <div className="flex gap-2">
        <dt>Fecha de constitución:</dt>
        <dd className="text-slate-500">
          {dateFormatter.format(registrationDate)}
        </dd>
      </div>
      <div className="flex gap-2">
        <dt>Antigüedad:</dt>
        <dd className="text-slate-500">
          {formatDistanceToNowStrict(registrationDate, {
            locale: es,
          })}
        </dd>
      </div>
    </>
  );
}
